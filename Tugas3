#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define TABLE_SIZE 10

struct node 
{
    char data[100];
    struct node *next;
} *hashTable[TABLE_SIZE], *curr;

int hashMethod = 1;  
int collisionMethod = 1;  

int midSquareHash(int key) 
{
    key *= key;
    int mid = (key / 100) % 100; 
    return mid % TABLE_SIZE;
}

int divHash(int key) 
{
    return key % TABLE_SIZE;
}

int foldingHash(int key) 
{
    int part1 = key / 1000;
    int part2 = key % 1000;
    return (part1 + part2) % TABLE_SIZE;
}

int digitExtractionHash(int key) 
{
    int extracted = (key / 10) % 10; 
    return extracted % TABLE_SIZE;
}

int rotationHash(int key) 
{
    int lastDigit = key % 10;
    int remaining = key / 10;
    return ((lastDigit * 1000) + remaining) % TABLE_SIZE;
}

int selectHashFunction(int key) 
{
    switch (hashMethod) 
    {
        case 1: return divHash(key);
        case 2: return midSquareHash(key);
        case 3: return foldingHash(key);
        case 4: return digitExtractionHash(key);
        case 5: return rotationHash(key);
        default: return divHash(key);
    }
}

int generateKey(char data[]) 
{
    int key = 0;
    for (int i = 0; data[i] != '\0'; i++) 
    {
        key += data[i];
    }
    return key;
}




int linearProbing(int key) 
{
    int index = key;
    while (hashTable[index] != NULL) 
    {
        index = (index + 1) % TABLE_SIZE;
    }
    return index;
}


void insertData(char data[]) 
        {
    int key = generateKey(data);
    int hashKey = selectHashFunction(key);

    if (collisionMethod == 1)
    { 
        if (hashTable[hashKey] != NULL) 
        {
            hashKey = linearProbing(hashKey);
        }
    }

    struct node *newNode = (struct node *)malloc(sizeof(struct node));
    strcpy(newNode->data, data);
    newNode->next = NULL;

    if (collisionMethod == 2) 
    {
        newNode->next = hashTable[hashKey];
    }

    hashTable[hashKey] = newNode;
}

void viewHashTable() 
{
    for (int i = 0; i < TABLE_SIZE; i++) 
    {
        printf("[%d]: ", i);
        curr = hashTable[i];
        while (curr != NULL) 
        {
            printf("%s -> ", curr->data);
            curr = curr->next;
        }
        printf("NULL\n");
    }
}

void selectMenu() 
{
    printf("Pilih metode Hash Function:\n");
    printf("1. Division\n2. Mid-Square\n3. Folding\n4. Digit Extraction\n5. Rotation\nPilihan: ");
    scanf("%d", &hashMethod);

    printf("\nPilih metode Collision Handling:\n");
    printf("1. Linear Probing\n2. Chaining\nPilihan: ");
    scanf("%d", &collisionMethod);
}

int main() 
{
    char data[100];
    selectMenu();

    while (1) 
    {
        printf("\nInput Data (ketik 'exit' untuk keluar): ");
        scanf("%s", data);
        if (strcasecmp(data, "exit") == 0) break;
        insertData(data);
    }
    
    printf("\nHasil Hash Table:\n");
    viewHashTable();






    return 0;
}
